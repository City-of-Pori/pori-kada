<?php
/**
 * @file
 * Code for the Pori Attraction feature.
 */

include_once 'pori_attraction_feature.features.inc';

/**
 * Implements hook_preprocess_node().
 */
function pori_attraction_feature_preprocess_node(&$vars) {
  global $language;
  if ($vars['type'] == 'attraction_card' && $vars['elements']['#view_mode'] == 'attraction_card_mosaic_item') {
    if (!empty($vars['field_product_liftup'][$language->language][0]['target_id'])) {
      $liftup = $vars['field_product_liftup'][$language->language][0]['target_id'];
    }
    if (!empty($vars['field_attraction_product_desc'][$language->language][0]['value'])) {
      $description = $vars['field_attraction_product_desc'][$language->language][0]['value'];
    }

    // If there is no product liftup or there's a liftup but no description, use the node title.
    if (empty($liftup) || (!empty($liftup) && empty($description))) {
      $vars['liftup_title'] = '<h2 class="attraction-card-mosaic__title">' . $vars['title'] . '</h2>';
    }

    // Try to find the product description.
    if (!empty($description)) {
      $vars['liftup_description'] = '<div class="attraction-card-mosaic__desc">' . truncate_utf8($description, 120, TRUE, TRUE, 90) . '</div>';
    }
    // And if that didn't work, use the lead paragraph.
    elseif (!empty($vars['field_lead_paragraph_et'][$language->language][0]['value'])) {
      $vars['liftup_description'] = '<div class="attraction-card-mosaic__ingress">' . truncate_utf8($vars['field_lead_paragraph_et'][$language->language][0]['value'], 100, TRUE, TRUE, 70) . '</div>';
    }
  }
}

/**
 * Implements hook_ds_fields_info().
 *
 * Add fields that are needed for widget rendering.
 */
function pori_attraction_feature_ds_fields_info($entity_type) {
  if ($entity_type == 'widget') {
    $fields = array();
    // Widgets: Attraction card list.
    $fields['widget']['widget_attraction_list_view'] = array(
      'title' => t('Attraction list view'),
#      'ui_limit' => array('attraction_list|*'),
      'field_type' => DS_FIELD_TYPE_PREPROCESS,
    );
    return $fields;
  }
}

/**
 * Parse args from widget to be used in event filtering.
 */
function pori_attraction_feature_parse_event_args($widget) {
  // Available filters.
  $filters = array(
    'field_attraction_category' => array(
      'value_in' => 'tid',
      'multiple_operator' => '+',
      'prettypath' => 'type',
    ),
  );
  // Args to pass to view.
  $view_args = array();
  // Params to pass to see more link.
  $search_params = array();
  // Go through filters and gather view filter args.
  foreach ($filters as $field => $filter_conf) {
    $values = array();
    foreach ($widget->$field as $delta => $field_item) {
      $value = $field_item->value()->$filter_conf['value_in'];
      $values[] = $value;
      // Add search params for linking.
      $search_params[] = $filter_conf['prettypath'] . '/' . $value;
    }
    // Use 'all' if no filter were found.
    if (empty($values)) {
      $view_args[] = 'all';
    }
    // Or join the values with defined operator.
    else {
      $view_args[] = implode($filter_conf['multiple_operator'], $values);
    }
  }
  return array($view_args, $search_params);
}

/**
 * Build content for event mosaic widget.
 *
 * NOTE: This has to be named with the kada_widget_feature prefix because it is
 * hard-coded in kada_widget_feature_entity_view().
 */
function kada_widget_feature_build_attraction_list(&$entity, $view_mode, $langcode) {
  $widget = entity_metadata_wrapper('widget', $entity);

  // Parse view args and search params from widget.
  list($view_args, $search_params) = pori_attraction_feature_parse_event_args($widget);
  // Create the view.
  $view = views_get_view('attraction_card_widget');
  $view->set_display('list');
  // Set arguments.
  $view->set_arguments($view_args);
  $view->pre_execute();
  $view->execute();
  // Render view
  $view_content = $view->render();
  // Populate field.
  $entity->content['widget_attraction_list_view'] = array('#markup' => $view_content);
}
