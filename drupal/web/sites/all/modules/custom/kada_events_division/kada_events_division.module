<?php

/**
 * @file
 * KADA event calendar division.
 */

/**
 * Implements hook_boot().
 *
 * According to some documentation, this is needed to make sure that
 * hook_url_inbound_alter() is executed early enough.
 *
 * @TODO: This sounds strange AND may be deprecated in d7,
 * find link for said documentation.
 */
function kada_events_division_boot() {
}

/**
 * Documentation (@TODO).
 */
function _kada_events_division_section_prefixes() {
  $section_prefixes = array(
    'events' => array(
      'label' => t('Events'),
      'en' => '/events',
      'fi' => '/tapahtumat',
    ),
    'hobbies' => array(
      'label' => t('Hobbies'),
      'en' => '/hobbies',
      'fi' => '/harrasteet',
    ),
  );
  // Just copy the identical ones for now and override Finnish prefixes.
  $section_prefixes['events']['fi'] = $section_prefixes['events']['en'];
  $section_prefixes['hobbies']['fi'] = $section_prefixes['hobbies']['en'];
  $section_prefixes['events']['sv'] = $section_prefixes['events']['en'];
  $section_prefixes['hobbies']['sv'] = $section_prefixes['hobbies']['en'];
  $section_prefixes['events']['ru'] = $section_prefixes['events']['en'];
  $section_prefixes['hobbies']['ru'] = $section_prefixes['hobbies']['en'];

  return $section_prefixes;
}

/**
 * Create events/hobbies links.
 */
function _kada_events_division_selection_link($prefix) {
  global $language;
  $section_prefixes = _kada_events_division_section_prefixes();
  $path = &drupal_static('kada_calendar_section');
  $label = $section_prefixes[$prefix]['label'];
  $url = $section_prefixes[$prefix][$language->language] . '/calendar';
  // If the requested link is to the active prefix, set active class.
  $class = $prefix == $path ? 'active' : '';
  $link = $class ? l($label, $url, array('attributes' => array('class' => $class))) : l($label, $url);

  return $link;
}

/**
 * Load parents of term.
 */
function _kada_events_division_term_parents_search($term) {
  // Get taxonomy term parent.
  $parents = taxonomy_get_parents($term);

  // If no parents found load term.
  if (empty($parents)) {
    $term = taxonomy_term_load($term);
  }
  else {
    while (TRUE) {
      // Get the term.
      $term = reset($parents);
      if (!empty($term->field_url_keyword)) {
        break;
      }
      $parents = taxonomy_get_parents($term->tid);
      if (empty($parents)) {
        // Keyword not found.
        return FALSE;
      }
    }
  }

  return $term;
}

/**
 * Query node content to get event contents event types terms.
 */
function _kada_events_division_content_query($nid) {
  // Load node content.
  $content = node_load($nid);
  $content_term = '';
  if (isset($content->field_event_types[LANGUAGE_NONE][0])) {
    $content_term = $content->field_event_types[LANGUAGE_NONE][0]['tid'];
  }

  return $content_term;
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Adds the correct prefix to the outbound URL's.
 */
function kada_events_division_url_outbound_alter(&$path, &$options, $original_path) {
  $kada_calendar_section = &drupal_static('kada_calendar_section');
  $domain = domain_get_domain();
  // Check that machine name is set. https://www.drupal.org/node/1941038
  if (empty($domain['machine_name'])) {
    $domain['machine_name'] = domain_load_machine_name($domain['domain_id']);
  }

  // Try to avoid absolute links (start with / or http(s)).
  $not_external = (strpos($path, 'http://') !== 0 && strpos($path, 'https://') !== 0 && strpos($path, '/') !== 0) && empty($options['base_url']);
  if ($not_external && !empty($tkufi_calendar_section)) {
    // Append prefix to the link prefix (appending to not override lang prefix)
    $options['prefix'] .= $tkufi_calendar_section . '/';
  }

  if ($not_external && $domain['machine_name'] == 'calendar' && !$kada_calendar_section) {
    if (preg_match('/node\/(\d+$)/', $path, $matches)) {
      $nid = $matches['1'];
      $cid = 'tkufi_event_prefix_' . $nid;
      // Create cache for nids.
      $prefix = &drupal_static($cid);
      if (empty($prefix)) {
        if ($cache = cache_get($cid)) {
          $prefix = $cache->data;
        }
        else {
          $node_term = _kada_events_division_content_query($nid);

          $parent = _kada_events_division_term_parents_search($node_term);

          if (!empty($parent->field_url_keyword)) {
            // Concate prefix so we do not lose language prefix.
            $prefix = $parent->field_url_keyword[LANGUAGE_NONE]['0']['value'] . '/';
          }
          else {
            // If no keyword present add event as prefix.
            $prefix = 'event/';
          }

          cache_set($cid, $prefix, 'cache', CACHE_TEMPORARY);
        }
      }
      $options['prefix'] = $prefix;
    }
  }
}

/**
 * Implements hook_url_inbound_alter().
 *
 * Removes the prefix from inbound URL's.
 */
function kada_events_division_url_inbound_alter(&$path, $original_path, $path_language) {
  $domain = domain_get_domain();
  // Check that machine name is set. https://www.drupal.org/node/1941038
  if (empty($domain['machine_name'])) {
    $domain['machine_name'] = domain_load_machine_name($domain['domain_id']);
  }

  if ($domain['machine_name'] == 'calendar') {
    // Always redirect frontpage or empty prefixes to [prefix]/calendar.
    if (drupal_is_front_page() || (arg(0) == 'events') && !arg(1)) {
      drupal_goto('events/calendar');
    }
    if (arg(0) == 'hobbies' && !arg(1)) {
      drupal_goto('hobbies/calendar');
    }
    $section_prefixes = _kada_events_division_section_prefixes();
    // Look for prefixes and remove them from the internal URL.
    foreach ($section_prefixes as $prefix => $section) {
      if (preg_match('/^' . $prefix . '($|\/)(.*)/', $path, $matches)) {
        $kada_calendar_section = &drupal_static('kada_calendar_section');
        $kada_calendar_section = $prefix;
        $path = $matches[2];
        if (empty($path)) {
          $_GET['q'] = $path = variable_get('site_frontpage', 'node');
        }

        // If the path had a prefix, the previously done lookup didn't work
        // properly; we need to do it again.
        if ($source = drupal_lookup_path('source', $path, $path_language)) {
          $path = $source;
        }
      }
    }
  }
}

/**
 * Implements hook_block_info().
 *
 * Declare what blocks are provided by this module.
 */
function kada_events_division_block_info() {
  $block['kadacalendar_switcher'] = array(
    'info' => t('Calendar switcher'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $block;
}

/**
 * Implements hook_block_view().
 *
 * Define what our block is going to look like.
 */
function kada_events_division_block_view($delta = '') {
  $block = array();

  if ($delta == 'kadacalendar_switcher') {
    $add_event = '/event/add';

    $block['subject'] = t('Calendar switcher');

    $block['content'] = '<ul class="menu">
      <li class="menu__item--events menu__item">
        <span class="menu__item--expanded-toggle"></span>
        ' . _kada_events_division_selection_link('events') . '
      </li>
      <li class="menu__item--hobbies menu__item">
        <span class="menu__item--expanded-toggle"></span>
        ' . _kada_events_division_selection_link('hobbies') . '
      </li>
      <li class="menu__item--event-add menu__item">
        <span class="menu__item--expanded-toggle"></span>
        ' . l(t('Add your own event'), $add_event) . '
      </li></ul>';
  }

  return $block;
}

/**
 * Implements hook_views_pre_view().
 *
 * Show content based on selected calendar.
 */
function kada_events_division_views_pre_view(&$view, &$display_id, &$args) {
  // Select either event indexed map or list.
  if ($display_id == 'indexed_event_map'
    || $display_id == 'indexed_event_list'
    || $display_id == 'event_tab_most_popular'
    || $display_id == 'event_tab_happening_soon'
    || $display_id == 'event_tab_free'
    || $display_id == 'event_tab_happening_recurring') {
    // Check if args is empty and set tid as arg.
    if (empty($args)) {
      // Lookup for current calendar.
      $selection = &drupal_static('tkufi_calendar_section');

      // Load event types vocabulary and terms.
      $vocabulary = taxonomy_vocabulary_machine_name_load('event_types');
      $event_types = taxonomy_get_tree($vocabulary->vid);

      // Look for 0 depth terms.
      $parent_terms = array();
      foreach ($event_types as $types) {
        if ($types->depth == '0') {
          $parent_terms[] = $types->tid;
        }
      }

      // Load depth 0 term data.
      $term_data = array();
      foreach ($parent_terms as $term) {
        $term_data[] = taxonomy_term_load($term);
      }

      // Look for url_keyword data and compare to selected calendar.
      $term_filter = '';
      foreach ($term_data as $data) {
        if ($data->field_url_keyword[LANGUAGE_NONE][0]['safe_value'] == $selection) {
          $term_filter = $data->tid;
        }
      }

      // Add term id as filter argument to contextual filter All parents.
      $args[] = $term_filter;
    }
  }
}

/**
 * Create event url for given node. Currently only used directly in theme:.
 *
 * @see driveturku_ds_pre_render_alter()
 */
function kada_events_division_event_url($node, $link_text = "Read more") {
  // Check the type of node.
  if (empty($node->nid) || $node->type != 'event') {
    // Shouldn't happen!
    return '';
  }

  // Check domain and groups, make sure we link to original/current
  // domain for theatre domain nodes, or any nodes with multiple groups.
  // Also, subevents should link to the specific subevent, which has
  // the specific event date and previous/upcoming events in the series.
  if (!empty($node->domains)) {
    $override_link = kada_events_division_event_url_override($node, $link_text);
    if (!empty($override_link)) {
      return $override_link;
    }
  }

  // If we continue here, we manipulate the link heavily and point it
  // to hardcoded calendar-domain instead. For reason X.
  global $language;
  // Get language prefix.
  $language_prefix = !empty($language->prefix) ? $language->prefix . '/' : '';
  // Resolve event base type.
  $term_id = $node->field_event_types[LANGUAGE_NONE][0]['tid'];
  $term = _driveturku_term_parents_search($term_id);
  $url_keyword = $term->field_url_keyword[LANGUAGE_NONE][0]['value'];
  // Get path alias.
  $path = drupal_get_path_alias('node/' . $node->nid);
  // Return full url.
  $path = CALENDAR_BASE_URL . $language_prefix . $url_keyword . '/' . $path;

  return l(t($link_text), $path, array(
    'html' => TRUE,
    'external' => TRUE,
  ));
}

/**
 * Override for event url link in some cases.
 *
 * The main logic was changed to fix various problems with linking of event
 * nodes (master, sub, single) to their content, especially for
 * teatteri.turku.fi.
 *
 * The "Read more"-links for events that are subevents in an event series,
 * shouldn't be manipulated, especially if they are theatre nodes with
 * multiple groups attached to them.
 *
 * We wont (anymore) manipulate the link path for event nodes with
 * theatre as primary domain. Each theatre node may be linked to 3 organic
 * groups for based on 3 languages, and the multigroup used to result in:
 * - broken menu HTML (unknown reason) if theatre node is viewed on
 * calendar domain, to which the url manipulation leads it.
 * - It seems that the brokenness may have been caused by partial
 * translations, which where fixed recently, so it is not necessarily a
 * problem.
 * - Normally a redirect to primary domain (turku.fi) may occur when a node
 * is viewed on non-source domain, which happens in
 * kada_domains_feature_init().
 * However the logic there assumes that no redirect should be done if there
 * are multiple og-groups attached, as is the case for Turku City Theatre.
 * - The forwarding logic also doesnt work well on environments other than
 * production, demo currently forwards to prod default domain, for example:
 * http://turkukalenteri.dt-demo.turku.fi/events/tapahtuma/
 * ke-03162016-1900-palvelija ==>
 * http://teatteri.turku.fi/tapahtuma/ke-03162016-1900-palvelija
 * A normal node view on http://teatteri.dt-demo.turku.fi is what would
 * work best.
 * Also, the reason why multiple Theatre OG group versions are needed, is
 * because each group is language specific (fi, en, sv), but the event og
 * reference is shared between languages. Which means its best to tag all
 * 3 organic groups. Og-groups are not translateable like events.
 */
function kada_events_division_event_url_override($node, $link_text = "Read more") {
  if (!empty($node->type)) {
    $event_domains = $node->domains;
    if (!empty($node->og_group_ref[LANGUAGE_NONE])) {
      foreach ($node->og_group_ref[LANGUAGE_NONE] as $value) {
        if (!empty($value['target_id'])) {
          $event_groups[$value['target_id']] = $value['target_id'];
        }
      }
    }
    else {
      $event_groups = array();
    }

    // See note in the README.txt of this module, for more info about these
    // semi-hardcoded settings, which we use to determine if we want to
    // manipulate the "Read more" link urls.
    // teatteri.turku.fi by default.
    $avoid_redirect_domains_ids = variable_get(
      'kada_events_division_domain_ids', array(3));
    // City Theatre in fi, en, sv.
    $avoid_redirect_groups_nids = variable_get(
      'kada_events_division_group_nids', array(5503, 13285, 13286));
    // 0 = false = multiple groups.
    $avoid_redirect_multigroups = variable_get(
      'kada_events_division_multigroups', 0);
    // 1 = true = subgroups.
    $avoid_redirect_subevents = variable_get(
      'kada_events_division_subevents', 1);

    // Match some special domain/group combinations, potentially returning
    // a simple link, with no further domain manipulation.
    if (($avoid_redirect_subevents &&
        $node->field_date_type[LANGUAGE_NONE][0]['value'] == 'sub')
      || array_intersect($avoid_redirect_domains_ids, $event_domains)
      || array_intersect($avoid_redirect_groups_nids, $event_groups)
      || ($avoid_redirect_multigroups && !empty($event_groups) &&
        count($event_groups) > 1)) {
      return l(t($link_text), 'node/' . $node->nid);
    }
  }
  return '';
}

/**
 * Short description missing(@TODO).
 *
 * Helper to retrieve the next sub event (recurring event) based on its
 * parent event, aka event series.
 */
function kada_events_division_fetch_next_recurring_event($super_event_node = FALSE, $super_nid_override = FALSE) {
  $subevent_node = NULL;
  // dsm($super_event_node);
  if (empty($super_event_node->nid) && empty($super_nid_override)) {
    return FALSE;
  }
  if (!empty($super_nid_override)) {
    $node = node_load($super_nid_override);
  }
  else {
    $node = $super_event_node;
    if (empty($node->field_date_type[LANGUAGE_NONE][0]['value'])
      || $node->field_date_type[LANGUAGE_NONE][0]['value'] != 'super') {
      return FALSE;
    }
  }
  if (empty($node->nid)) {
    return FALSE;
  }

  $node_ids = _kada_events_base_feature_related_sub_events($node->nid, 1);
  if (empty($node_ids)) {
    return FALSE;
  }

  // Find next sub event in a series (one which starts after 00:00
  // of current day).
  // FORMAT now to 2016-12-24 00:00:00.
  $start_of_today = date('Y-m-d H:i:s', strtotime('today'));

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->entityCondition('bundle', 'event')
    ->entityCondition('entity_id', $node_ids, 'IN')
    ->fieldCondition('field_date_type', 'value', 'sub', '=')
    ->fieldCondition('field_event_date', 'value', $start_of_today, '>=')
    ->fieldOrderBy('field_event_date', 'value', 'ASC')
    ->range(0, 1);
  $results = $query->execute();

  if (!empty($results['node'])) {
    $sub_nid = key($results['node']);
    $subevent_node = node_load($sub_nid);
    if (!empty($subevent_node->nid)) {
      return $subevent_node;
    }
  }
  return FALSE;
}
