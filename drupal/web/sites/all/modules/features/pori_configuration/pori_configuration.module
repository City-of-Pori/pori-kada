<?php
/**
 * @file
 * Code for the Pori configuration feature.
 */

include_once 'pori_configuration.features.inc';

/**
 * Implements hook_language_switch_links_alter().
 */
 // TODO: Remove this alteration as it is no longer needed.
function pori_configuration_language_switch_links_alter(&$links, $type, $path) {
  // global $language;
  // $current_domain = domain_get_domain();
  // // Change language switcher behavior so that it links always to front page.
  // if ($type == LANGUAGE_TYPE_INTERFACE && isset($links[$language->language]) && $current_domain['machine_name'] == 'pori_fi') {
  //   foreach ($links as $langcode => &$link) {
  //     if ($link['language']->language != $language->language ) {
  //       $link['href'] = '<front>';
  //     }
  //   }
  // }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pori_configuration_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-kada-admin-content-page') {
    global $user;
    $logged_in_user = user_load($user->uid);
    $user_domains = $logged_in_user->domain_user;

    // Based on the logged in users domain, pick the default domain filter on
    // admin/content. If there is more than one domain on the user's profile,
    // use the "All" option that is default on the view.
    if (count($user_domains) == 1) {
      $user_domain = reset($user_domains);

      if (empty($_GET['gid'])) {
        $form_state['input']['gid'] = $user_domain;
      }
    }
  }
}

/**
 * @param $info
 * @param $hook
 * Unset sas plugin for cookie compliance as it breaks the form.
 */
function pori_configuration_wysiwyg_load_includes_alter(&$info, $hook) {
  $path = current_path();
  if($path == 'admin/config/system/eu-cookie-compliance') {
    unset($info['sas']);
  }
}

/**
 * Implements hook_form_alter().
 *
 * If the user only has one domain set, default to the corresponding section in
 * node form.
 */
function pori_configuration_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'eu-cookie-compliance-admin-form') {
    unset($form['popup_message']['eu_cookie_compliance']['popup_agree_button_message']['#states']);
  }
  // Node edit forms.
  if(isset($form['#node_edit_form']) && $form['#node_edit_form'] == TRUE && $form_id == 'page_node_form') {
    $form['field_liftup_video']['#access'] = FALSE;
    $form['field_liftup_video_scrim']['#access'] = FALSE;
  }
  if(isset($form['#node_edit_form']) && $form['#node_edit_form'] == TRUE) {
    global $user;
    // Web journalist get some additional permission grants.
    if(in_array('web journalist', $user->roles) && $form['options']['#access'] == FALSE) {
      // Allow access to publishing options.
      $form['options']['#access'] = TRUE;
      // Disallow stickying and promoting.
      $form['options']['promote']['#access'] = FALSE;
      $form['options']['sticky']['#access'] = FALSE;
    }
  }
  // Only react to node forms with an empty Group audience field.
  if (isset($form['#node_edit_form']) && $form['#node_edit_form'] && !empty($form['og_group_ref']) && empty($form['og_group_ref'][LANGUAGE_NONE][0]['default']['#default_value'])) {
    global $user, $language;

    // If the user only has one domain defined, we could use that as a default.
    if (count($user->domain_user) == 1) {
      // Domain to section tnid mapping.
      $domain_sections = array(
        'visitpori_fi' => 3183,
        'businesspori_fi' => 84769,
      );

      $domain_machine_name = domain_load_machine_name(reset($user->domain_user));
      // Check if there's a tnid mapping for the user's sole domain.
      if (!empty($tnid = $domain_sections[$domain_machine_name])) {
        $visitpori_sections = translation_node_get_translations($tnid);
        // ... and if there is, fetch the current language node of the section.
        if (!empty($sec_id = $visitpori_sections[$language->language])) {
          $sec_id = $sec_id->nid;
          // Set as default.
          $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#default_value'][$sec_id] = $sec_id;
        }
      }
    }
  }
}

/**
 * Implements hook_responsive_menus_execute_alter().
 */
function pori_configuration_responsive_menus_execute_alter(&$settings) {
  // The logic in Responsive Menus uses filter_xss_admin() to filter the values
  // to protect against security attacks. However, it can also break JS
  // selectors.
  // @see responsive_menus_execute()
  if (!empty($settings[0]['selectors'])) {
    foreach ($settings[0]['selectors'] as $key => $value) {
      if (!empty($value) && !is_array($value)) {
        $settings[0]['selectors'][$key] = str_replace('&gt;', '>', $value);
      }
    }
  }
}

function pori_configuration_page_alter(&$page) {
  // Add overrides to cookie consent theme.
  drupal_add_css(
    "
    .eu-cookie-compliance-save-preferences-button {
      background-color: black;
      color: white;
      text-shadow: none;
      background-image: none;
    }
    @media (min-width: 700px) {
      #popup-text {
        width: 48%;
        margin-right: 2%;
      }
      .consent-wrapper {
        width: 50%;
        float: right;
        clear: none;
      }
    }
    ", array('type' => 'inline')
  );
  $domain = domain_get_domain();
  $args = arg();
  drupal_add_css('.CookieDeclaration {display: none;}', 'inline');
  // Add CookiebotCookie accessibility script.
  drupal_add_js(drupal_get_path('module', 'pori_configuration') . '/js/cookiebot_accessibility.js');

  if (!empty($args[0]) && $args[0] == 'admin') {
    $admin = TRUE;
  }
  else {
    $admin = FALSE;
  }
  if ($domain['machine_name'] == 'visitpori_fi' && !$admin) {
    drupal_add_js(drupal_get_path('module', 'pori_configuration') . '/js/pixel.js', array('cache' => FALSE));
  }
}

function pori_configuration_init() {
  // Pori.fi
  $host = $_SERVER['HTTP_HOST'];
  // Simulate prod by commenting out the below.
  //$host = 'pori.fi';
  $prod_hosts = array('www.pori.fi','www.businesspori.fi', 'www.visitpori.fi');

  // Are we in prod?
  $is_prod = in_array($host, $prod_hosts);

  // If we are, then.
  if ($is_prod) {
    // Pori.fi
    $config = db_query('SELECT data FROM {gtag_config} WHERE name = :name', array(':name' => 'google_tag.container.pori_fi'))->fetchField();
    if (!empty($config)) {
      $config = unserialize($config);
      $env = 'env-1';
      $token = 'aALldsweWeGKdVo8lmD1rg';
      if ($config['environment_id'] != $env) {
        $config['environment_id'] = $env;
        $config['environment_token'] = $token;
        $to_db = serialize($config);
        $status = db_update('gtag_config') // Table name no longer needs {}
          ->fields(array(
            'data' => $to_db,
          ))
          ->condition('name', 'google_tag.container.pori_fi', '=')
          ->execute();
      }
    }
    // Business pori.
    $config = db_query('SELECT data FROM {gtag_config} WHERE name = :name', array(':name' => 'google_tag.container.businesspori_fi'))->fetchField();
    if (!empty($config)) {
      $config = unserialize($config);
      $env = 'env-1';
      $token = 'n2UyAwBVVTVOlkoHisOrNQ';
      if ($config['environment_id'] != $env) {
        $config['environment_id'] = $env;
        $config['environment_token'] = $token;
        $to_db = serialize($config);
        $status = db_update('gtag_config') // Table name no longer needs {}
          ->fields(array(
            'data' => $to_db,
          ))
          ->condition('name', 'google_tag.container.businesspori_fi', '=')
          ->execute();
      }
    }
    // Visitpori.fi.
    $config = db_query('SELECT data FROM {gtag_config} WHERE name = :name', array(':name' => 'google_tag.container.visitpori_fi'))->fetchField();
    if (!empty($config)) {
      $config = unserialize($config);
      $env = 'env-1';
      $token = 'adrkc4IT2ISRyXIbgfAkIQ';
      if ($config['environment_id'] != $env) {
        $config['environment_id'] = $env;
        $config['environment_token'] = $token;
        $to_db = serialize($config);
        $status = db_update('gtag_config') // Table name no longer needs {}
          ->fields(array(
            'data' => $to_db,
          ))
          ->condition('name', 'google_tag.container.visitpori_fi', '=')
          ->execute();
      }
    }
  }
  // If not we use diff env's and tokens.
  else {
    // Pori.fi
    $config = db_query('SELECT data FROM {gtag_config} WHERE name = :name', array(':name' => 'google_tag.container.pori_fi'))->fetchField();
    if (!empty($config)) {
      $config = unserialize($config);
      $env = 'env-5';
      $token = 'eltW5Tl_tkJBBZ1Ur_fLaQ';
      if ($config['environment_id'] != $env) {
        $config['environment_id'] = $env;
        $config['environment_token'] = $token;
        $to_db = serialize($config);
        $status = db_update('gtag_config') // Table name no longer needs {}
          ->fields(array(
            'data' => $to_db,
          ))
          ->condition('name', 'google_tag.container.pori_fi', '=')
          ->execute();
      }
    }
    // Business pori.
    $config = db_query('SELECT data FROM {gtag_config} WHERE name = :name', array(':name' => 'google_tag.container.businesspori_fi'))->fetchField();
    if (!empty($config)) {
      $config = unserialize($config);
      $env = 'env-4';
      $token = 'nzqh8KqGGBMPsSJA5EpKZQ';
      if ($config['environment_id'] != $env) {
        $config['environment_id'] = $env;
        $config['environment_token'] = $token;
        $to_db = serialize($config);
        $status = db_update('gtag_config') // Table name no longer needs {}
          ->fields(array(
            'data' => $to_db,
          ))
          ->condition('name', 'google_tag.container.businesspori_fi', '=')
          ->execute();
      }
    }
    // Visitpori.fi.
    $config = db_query('SELECT data FROM {gtag_config} WHERE name = :name', array(':name' => 'google_tag.container.visitpori_fi'))->fetchField();
    if (!empty($config)) {
      $config = unserialize($config);
      $env = 'env-4';
      $token = '5tE1uGUMaTgyVBbaQmzqug';
      if ($config['environment_id'] != $env) {
        $config['environment_id'] = $env;
        $config['environment_token'] = $token;
        $to_db = serialize($config);
        $status = db_update('gtag_config') // Table name no longer needs {}
          ->fields(array(
            'data' => $to_db,
          ))
          ->condition('name', 'google_tag.container.visitpori_fi', '=')
          ->execute();
      }
    }
  }
}
